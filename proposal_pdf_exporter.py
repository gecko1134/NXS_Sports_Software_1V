
import os, json, io
import streamlit as st
from reportlab.lib.pagesizes import LETTER
from reportlab.pdfgen import canvas
from reportlab.lib.units import inch
from shared.ui import page_header

def _draw_kv(c, x, y, k, v):
    c.setFont("Helvetica-Bold", 10); c.drawString(x, y, f"{k}:")
    c.setFont("Helvetica", 10); c.drawString(x+120, y, str(v))

def run(user):
    page_header("Sponsor Proposal PDF Exporter", "Converts latest_proposal.json into a printable PDF")
    path = "data/proposals/latest_proposal.json"
    if not os.path.exists(path):
        st.error("No proposal found. Create one in Marketing → Ad Launcher first.")
        return
    with open(path,"r") as f:
        data = json.load(f)

    st.json(data)
    if st.button("Generate PDF"):
        buf = io.BytesIO()
        c = canvas.Canvas(buf, pagesize=LETTER)
        width, height = LETTER
        x, y = inch, height - inch

        c.setFont("Helvetica-Bold", 16)
        c.drawString(x, y, "NXS Sponsor Proposal")
        y -= 20
        c.setFont("Helvetica", 10)
        c.drawString(x, y, "This document summarizes a pricing-floor aligned proposal.")
        y -= 30

        _draw_kv(c, x, y, "Sponsor", data.get("sponsor")); y -= 14
        _draw_kv(c, x, y, "Placement", data.get("placement")); y -= 14
        _draw_kv(c, x, y, "Price Floor", f"${data.get('price_floor',0):,.0f}"); y -= 14
        c.setFont("Helvetica-Bold", 10); c.drawString(x, y, "Inputs:"); y -= 14
        c.setFont("Helvetica", 10)
        for k,v in (data.get("inputs") or {}).items():
            c.drawString(x+20, y, f"- {k}: {v}")
            y -= 12

        y -= 10
        c.setFont("Helvetica-Bold", 10); c.drawString(x, y, "Notes:"); y -= 12
        c.setFont("Helvetica", 10)
        for line in (data.get("notes","").split("\n")):
            c.drawString(x+20, y, line[:95])
            y -= 12

        y -= 10
        c.setFont("Helvetica", 9); c.drawString(x, y, f"Generated by NXS Master OS • Status: {data.get('status','Draft')}")
        c.showPage(); c.save()
        buf.seek(0)
        os.makedirs("exports", exist_ok=True)
        out = "exports/proposal.pdf"
        with open(out, "wb") as f:
            f.write(buf.read())
        st.success(f"Saved {out}")
        

# Create an auto-draft email with landing URL + tracking pixel
try:
    import json, os
    latest = json.load(open("data/proposals/latest_proposal.json"))
    pid = latest.get("proposal_id","")
    host = os.getenv("PROPOSAL_HOST","http://localhost:8081")
    pixel_host = os.getenv("PROPOSAL_PIXEL_HOST","http://localhost:8080")
    landing = f"{host}/p/{pid}" if pid else ""
    pixel = f'<img src="{pixel_host}/t/{pid}.png" width="1" height="1" style="display:none"/>' if pid else ""
    draft = "<p>Hi — attached is your proposal. Happy to review terms anytime.</p>"
    if landing:
        draft += f'<p><a href="{landing}">View proposal & next steps</a></p>'
    if pixel:
        draft += pixel
    os.makedirs("data/proposals", exist_ok=True)
    open("data/proposals/email_draft.html","w").write(draft)
except Exception as _e:
    pass

            with open(out, "rb") as f:
            st.download_button("Download Proposal PDF", f, file_name="NXS_Proposal.pdf")
